// The first task is to capture the search query when the form is submitted. 
//We can do this by listening for the submit event on the .js-search-form element and then capture whatever the user has typed into the input field.
const form = document.querySelector('.js-search-form');

// Next, we need to listen for the submit event on the form element so that we can capture the search query when the form is submitted. 
//We will attach the addEventListener method to our form node to achieve this.

form.addEventListener('submit', handleSubmit);
//handleSubmit which is the function that will run when the event is triggered

//When handleSubmit is executed, the value of the search input is stored in inputValue and any whitespace (such as spaces or tabs) 
//is removed from the beginning and end of string using the trim() method, before being stored in the searchQuery variable. 
//Subsequently, this variable is logged to the console.
async function handleSubmit(event) {

    // prevent page from reloading when form is submitted
    event.preventDefault();

    // get the value of the input field
    const inputValue = document.querySelector('.js-search-input').value;
    // remove whitespace from the input field
    const searchQuery = inputValue.trim();
    const searchResults = document.querySelector('.js-search-results');
    // searchResults.innerHTML = '';

    // const spinner = document.querySelector('.js-spinner');
    // spinner.classList.remove('hidden');

    try {
        const results = await searchWikipedia(searchQuery);
        if (results.query.searchinfo.totalhits == 0) {
            alert('No results found. Try different keywords');
            return;
        }
        displayResults(results);
    } catch (err) {
        console.log(err);
        alert('Failed to search wikipedia');
    }
}
// This function accepts a single parameter (searchQuery), 
// which is interpolated into the API endpoint string as the value of the &srsearch query parameter. 
// The endpoint variable is passed as the parameter to fetch. We need to wait for the promise to resolve before continuing which is achieved through the await keyword. 
// Note that await can only be used in an async function and all async functions always return a promise.

async function searchWikipedia(searchQuery) {
    const endpoint = `https://en.wikipedia.org/w/api.php?action=query&list=search&prop=info&inprop=url&utf8=&format=json&origin=*&srlimit=20&srsearch=${searchQuery}`;
    const response = await fetch(endpoint);
    if (!response.ok) {
        throw Error(response.statusText);
    }
    const json = await response.json();
    return json;
}


//https://en.wikipedia.org/w/api.php?action=query&list=search&prop=info&inprop=url&utf8=&format=json&origin=&srlimit=20&srsearch=SEARCH_QUERY_GOES_HERE

//format=json specifies that we are expecting a JSON response.
//origin=* helps us get around CORS restrictions.
//srlimit=20 specifies how many results should be returned per page to return (20 in this case)
//srsearch= contains the search query. SEARCH_QUERY_GOES_HERE is a placeholder which will be replaced by the userâ€™s input.

function displayResults(results) {
    // get a reference to the '.js-search-results' element
    const searchResults = document.querySelector('.js-search-results');
    // iterate over the 'search' array. Each nested object in the array can be
    // accesed though the 'result' parameter

    results.query.search.forEach(result => {
        const url = `https://en.wikipedia.org/?curid=${result.pageid}`;
        // append the search result to th DOM
        searchResults.insertAdjacentHTML(
            'beforeend',
            `<div class="result-item">
          <h3 class="result-title">
            <a href="${url}" target="_blank" rel="noopener">${result.title}</a>
          </h3>
          <a href="${url}" class="result-link" target="_blank" rel="noopener">${url}</a>
          <span class="result-snippet">${result.snippet}</span><br>
        </div>`
        );
    });
}


// On the first line of the callback function, the link to the corresponding Wikipedia page is generated by appending the value of the result.
// pageid property to https://en.wikipedia.org/?curid=. Next, each result is appended to the searchResults element using the DOM insertAdjacentHTML method.

// This method takes two arguments: The position to append the element (beforeend) and the HTML to be inserted at that position. In the second argument, template literals are used to present the HTML in a natural and readable manner.
//  We also have several placeholders in the code.
// These will be replaced in the final output.